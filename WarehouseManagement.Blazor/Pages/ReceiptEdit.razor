@page "/receipts/new"
@page "/receipts/edit/{Id:int}"
@using WarehouseManagement.Blazor.Models
@using WarehouseManagement.Blazor.Services
@inject IWarehouseService WarehouseService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudText Typo="Typo.h4" GutterBottom="true">@(Id == 0 ? "Новое поступление" : "Редактировать поступление")</MudText>

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6" Class="mb-4">Поступление</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveReceipt">
            Сохранить
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="Cancel" Class="ml-2">
            Отмена
        </MudButton>

        <MudGrid Class="mt-4">
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="receipt.Number" Label="Номер" Required="true" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudDatePicker @bind-Date="receiptDate" Label="Дата" Required="true" Variant="Variant.Outlined"/>
            </MudItem>
        </MudGrid>

        <MudTable Items="@receipt.Resources" Class="mt-4" Elevation="0" Bordered="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Ресурсы</MudText>
                <MudSpacer/>
                <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddResource"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Ресурс</MudTh>
                <MudTh>Единица измерения</MudTh>
                <MudTh>Количество</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <MudSelect @bind-Value="context.ResourceId" Variant="Variant.Outlined" Dense="true">
                        @foreach (var resource in availableResources)
                        {
                            <MudSelectItem Value="@resource.Id">@resource.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSelect @bind-Value="context.UnitOfMeasurementId" Variant="Variant.Outlined" Dense="true">
                        @foreach (var unit in availableUnits)
                        {
                            <MudSelectItem Value="@unit.Id">@unit.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudNumericField @bind-Value="context.Quantity" Variant="Variant.Outlined" Dense="true"/>
                </MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="() => RemoveResource(context)"/>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public int Id { get; set; }

    private CreateReceiptDocumentDto receipt = new();
    private DateTime? receiptDate = DateTime.Today;
    private List<ResourceDto> availableResources = new();
    private List<UnitOfMeasurementDto> availableUnits = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOptions();

        if (Id > 0)
        {
            await LoadReceipt();
        }
        else
        {
            receipt = new CreateReceiptDocumentDto
            {
                Number = GenerateNumber(),
                Date = DateTime.Today,
                Resources = new List<CreateReceiptResourceDto>()
            };
        }
    }

    private async Task LoadOptions()
    {
        availableResources = await WarehouseService.GetResourcesAsync(false);
        availableUnits = await WarehouseService.GetUnitsAsync(false);
    }

    private async Task LoadReceipt()
    {
        var existing = await WarehouseService.GetReceiptAsync(Id);
        if (existing != null)
        {
            receipt = new CreateReceiptDocumentDto
            {
                Number = existing.Number,
                Date = existing.Date,
                Resources = existing.Resources.Select(r => new CreateReceiptResourceDto
                {
                    ResourceId = r.ResourceId,
                    UnitOfMeasurementId = r.UnitOfMeasurementId,
                    Quantity = r.Quantity
                }).ToList()
            };
            receiptDate = existing.Date;
        }
    }

    private string GenerateNumber()
    {
        return $"П-{DateTime.Now:yyyyMMdd-HHmmss}";
    }

    private void AddResource()
    {
        receipt.Resources.Add(new CreateReceiptResourceDto
        {
            ResourceId = availableResources.FirstOrDefault()?.Id ?? 0,
            UnitOfMeasurementId = availableUnits.FirstOrDefault()?.Id ?? 0,
            Quantity = 1
        });
    }

    private void RemoveResource(CreateReceiptResourceDto resource)
    {
        receipt.Resources.Remove(resource);
    }

    private async Task SaveReceipt()
    {
        if (string.IsNullOrWhiteSpace(receipt.Number))
        {
            Snackbar.Add("Введите номер поступления", Severity.Warning);
            return;
        }

        if (!receiptDate.HasValue)
        {
            Snackbar.Add("Выберите дату", Severity.Warning);
            return;
        }

        receipt.Date = receiptDate.Value;

        try
        {
            if (Id == 0)
            {
                var result = await WarehouseService.CreateReceiptAsync(receipt);
                if (result != null)
                {
                    Snackbar.Add("Поступление создано", Severity.Success);
                    Navigation.NavigateTo("/receipts");
                }
                else
                {
                    Snackbar.Add("Ошибка при создании", Severity.Error);
                }
            }
            else
            {
                var updateDto = new UpdateReceiptDocumentDto
                {
                    Number = receipt.Number,
                    Date = receipt.Date,
                    Resources = receipt.Resources
                };
                var result = await WarehouseService.UpdateReceiptAsync(Id, updateDto);
                if (result != null)
                {
                    Snackbar.Add("Поступление обновлено", Severity.Success);
                    Navigation.NavigateTo("/receipts");
                }
                else
                {
                    Snackbar.Add("Ошибка при обновлении", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка: {ex.Message}", Severity.Error);
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/receipts");
    }

}