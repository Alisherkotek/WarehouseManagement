@* WarehouseManagement.Blazor/Components/Pages/Clients.razor *@
@page "/clients"
@using WarehouseManagement.Blazor.Models
@using WarehouseManagement.Blazor.Services
@inject IWarehouseService WarehouseService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h4" GutterBottom="true">Клиенты</MudText>

<MudCard Class="mb-4">
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenCreateDialog">
                    Добавить
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="ToggleArchived" Class="ml-2">
                    @(showArchived ? "Скрыть архив" : "К архиву")
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

<MudTable Items="@clients" Hover="true" Loading="@loading" LoadingProgressColor="Color.Info" Elevation="0" Bordered="true">
    <HeaderContent>
        <MudTh>Наименование</MudTh>
        <MudTh>Адрес</MudTh>
        <MudTh>Действия</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Наименование">
            @context.Name
            @if (context.IsArchived)
            {
                <MudChip T="string" Size="Size.Small" Color="Color.Warning" Class="ml-2">В архиве</MudChip>
            }
        </MudTd>
        <MudTd DataLabel="Адрес">@context.Address</MudTd>
        <MudTd DataLabel="Действия">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" OnClick="() => OpenEditDialog(context)"/>
            @if (!context.IsArchived)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Archive" Color="Color.Warning" Size="Size.Small" OnClick="() => ArchiveClient(context)" Tooltip="В архив"/>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.Unarchive" Color="Color.Success" Size="Size.Small" OnClick="() => RestoreClient(context)" Tooltip="Из архива"/>
            }
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="() => DeleteClient(context)"/>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<ClientDto> clients = new();
    private bool loading = false;
    private bool showArchived = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadClients();
    }

    private async Task LoadClients()
    {
        loading = true;
        try
        {
            clients = await WarehouseService.GetClientsAsync(showArchived);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Ошибка загрузки: {ex.Message}", Severity.Error);
            clients = new List<ClientDto>();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OpenCreateDialog()
    {
        var dialog = DialogService.Show<ClientDialog>("Добавить клиента");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadClients();
        }
    }

    private async Task OpenEditDialog(ClientDto client)
    {
        var parameters = new DialogParameters { ["Client"] = client };
        var dialog = DialogService.Show<ClientDialog>("Редактировать клиента", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadClients();
        }
    }

    private async Task ArchiveClient(ClientDto client)
    {
        var result = await WarehouseService.ArchiveClientAsync(client.Id);
        if (result)
        {
            Snackbar.Add("Клиент перемещен в архив", Severity.Success);
            await LoadClients();
        }
        else
        {
            Snackbar.Add("Ошибка архивации", Severity.Error);
        }
    }

    private async Task RestoreClient(ClientDto client)
    {
        var dto = new UpdateClientDto
        {
            Name = client.Name,
            Address = client.Address,
            IsArchived = false
        };
        var result = await WarehouseService.UpdateClientAsync(client.Id, dto);
        if (result != null)
        {
            Snackbar.Add("Клиент восстановлен из архива", Severity.Success);
            await LoadClients();
        }
        else
        {
            Snackbar.Add("Ошибка восстановления", Severity.Error);
        }
    }

    private async Task DeleteClient(ClientDto client)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Подтверждение",
            $"Удалить клиента {client.Name}?",
            yesText: "Удалить", cancelText: "Отмена");

        if (result == true)
        {
            var deleted = await WarehouseService.DeleteClientAsync(client.Id);
            if (deleted)
            {
                Snackbar.Add("Клиент удален", Severity.Success);
                await LoadClients();
            }
            else
            {
                Snackbar.Add("Невозможно удалить - клиент используется в документах", Severity.Error);
            }
        }
    }

    private async Task ToggleArchived()
    {
        showArchived = !showArchived;
        await LoadClients();
    }

}